---
  openapi: 3.1.0
  info:
    title: Breadcrumb API
    description: This is the API for Breadcrumb
    version: 0.1.0
  servers:
  - url: https://api.breadcrumb.ai
    description: Breadcrumb API server
  paths:
    "/conversations/{conversation_id}/chat":
      post:
        tags:
        - conversations
        summary: Send Message
        operationId: send_message_conversations__conversation_id__chat_post
        security:
        - APIKeyHeader: []
        parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            title: Conversation Id
        requestBody:
          required: true
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/MessageRequest"
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/ExecutionResponse"
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
    "/conversations/{conversation_id}/executions":
      get:
        tags:
        - conversations
        summary: List Conversation Executions
        description: List all executions for a conversation.
        operationId: list_conversation_executions_conversations__conversation_id__executions_get
        security:
        - APIKeyHeader: []
        parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            title: Conversation Id
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  type: array
                  items:
                    "$ref": "#/components/schemas/ExecutionResponse"
                  title: Response List Conversation Executions Conversations  Conversation
                    Id  Executions Get
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
    "/conversations/{conversation_id}/executions/{execution_id}":
      get:
        tags:
        - conversations
        summary: Get Conversation Execution
        description: Get a specific execution for a conversation.
        operationId: get_conversation_execution_conversations__conversation_id__executions__execution_id__get
        security:
        - APIKeyHeader: []
        parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            title: Conversation Id
        - name: execution_id
          in: path
          required: true
          schema:
            type: string
            title: Execution Id
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/ExecutionResponse"
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
    "/conversations/{conversation_id}/latest_execution":
      get:
        tags:
        - conversations
        summary: Get Latest Conversation Execution
        description: Get the latest execution for a conversation.
        operationId: get_latest_conversation_execution_conversations__conversation_id__latest_execution_get
        security:
        - APIKeyHeader: []
        parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            title: Conversation Id
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/ExecutionResponse"
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
    "/conversations/{conversation_id}":
      get:
        tags:
        - conversations
        summary: Get Conversation
        operationId: get_conversation_conversations__conversation_id__get
        security:
        - APIKeyHeader: []
        parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            title: Conversation Id
        responses:
          '200':
            description: Successful Response
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/ConversationResponse"
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
      delete:
        tags:
        - conversations
        summary: Delete Conversation
        operationId: delete_conversation_conversations__conversation_id__delete
        security:
        - APIKeyHeader: []
        parameters:
        - name: conversation_id
          in: path
          required: true
          schema:
            type: string
            title: Conversation Id
        responses:
          '204':
            description: Successful Response
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
    "/embed/token":
      post:
        tags:
        - embed
        summary: Generate embed token
        description: |-
          Generates a JWT token for embedded authentication.

              The token can be used to authenticate users in embedded contexts, such as
              iframe integrations. If a user with the provided email doesn't exist,
              a new user account will be created.
        operationId: generate_embed_token_embed_token_post
        requestBody:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/EmbedTokenRequest"
          required: true
        responses:
          '200':
            description: Successfully generated embed token
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/EmbedTokenResponse"
                example:
                  token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
          '400':
            description: Invalid request parameters
          '403':
            description: Invalid API key
          '404':
            description: Space not found
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
        security:
        - APIKeyHeader: []
    "/sources/database-connectors":
      get:
        tags:
        - sources
        summary: List database connectors
        description: Returns a list of all database connectors owned by the authenticated
          user.
        operationId: list_database_connectors_sources_database_connectors_get
        responses:
          '200':
            description: List of database connectors
            content:
              application/json:
                schema:
                  items:
                    "$ref": "#/components/schemas/DatabaseConnectorResponse"
                  type: array
                  title: Response List Database Connectors Sources Database Connectors
                    Get
          '403':
            description: Invalid API key
        security:
        - APIKeyHeader: []
      post:
        tags:
        - sources
        summary: Create a database connector
        description: |-
          Creates a new database connector for PostgreSQL or Redshift databases.

              The connector will be tested during creation to ensure the credentials are valid.
              Once created, the connector can be used as a data source for spaces and conversations.
        operationId: create_database_connector_route_sources_database_connectors_post
        requestBody:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DatabaseConnectorCreate"
          required: true
        responses:
          '200':
            description: Database connector created successfully
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/DatabaseConnectorResponse"
                example:
                  source_id: src_123
                  database_type: postgres
                  host: db.example.com
                  port: 5432
                  database: analytics
                  username: analyst
                  source_name: Production Analytics DB
                  status: READY
          '400':
            description: Invalid database type or connection parameters
          '403':
            description: Invalid API key
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
          '500':
            description: Database connection failed
        security:
        - APIKeyHeader: []
    "/spaces":
      post:
        tags:
        - spaces
        summary: Create a new space
        description: |-
          Creates a new space from a data source with optional filters.

              A space is a filtered view of a data source that can be shared with customers.
              The space will be created with read-only access for the specified customer.
        operationId: create_space_route_spaces_post
        requestBody:
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SpaceCreate"
          required: true
        responses:
          '200':
            description: Space created successfully
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/SpaceResponse"
                example:
                  space_id: space_789
                  source_id: src_123
                  name: Active Users Dashboard
                  partner_id: partner_123
                  customer_id: cust_456
                  filters:
                    status:
                      operator: equals
                      value: active
                    age:
                      operator: greater_than
                      value: 18
          '403':
            description: Invalid API key
          '404':
            description: Data source not found
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
        security:
        - APIKeyHeader: []
    "/spaces/by-partner":
      get:
        tags:
        - spaces
        summary: List partner spaces
        description: |-
          Lists all spaces owned by the authenticated partner.

              Only includes spaces that have been shared with customers.
              Returns the spaces along with their filter configurations.
        operationId: list_partner_spaces_spaces_by_partner_get
        responses:
          '200':
            description: List of spaces retrieved successfully
            content:
              application/json:
                schema:
                  items:
                    "$ref": "#/components/schemas/SpaceResponse"
                  type: array
                  title: Response List Partner Spaces Spaces By Partner Get
          '403':
            description: Invalid API key
        security:
        - APIKeyHeader: []
    "/spaces/{space_id}/conversations":
      post:
        tags:
        - spaces
        summary: Create a new conversation in a space
        description: |-
          Creates a new conversation (task) within a specific space.

              A conversation allows users to interact with the data in the space through natural language.
              The conversation will be associated with the space and can access the space's data sources.
        operationId: create_conversation_in_space_spaces__space_id__conversations_post
        security:
        - APIKeyHeader: []
        parameters:
        - name: space_id
          in: path
          required: true
          schema:
            type: string
            title: Space Id
        responses:
          '200':
            description: Conversation created successfully
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/ConversationResponse"
          '403':
            description: Invalid API key
          '404':
            description: Space not found
          '422':
            description: Validation Error
            content:
              application/json:
                schema:
                  "$ref": "#/components/schemas/HTTPValidationError"
  components:
    schemas:
      ConversationResponse:
        properties:
          id:
            type: string
            title: Id
          space_id:
            anyOf:
            - type: string
            - type: 'null'
            title: Space Id
          created_at:
            type: string
            title: Created At
          updated_at:
            type: string
            title: Updated At
        type: object
        required:
        - id
        - created_at
        - updated_at
        title: ConversationResponse
      DatabaseConnectorCreate:
        properties:
          database_type:
            type: string
            title: Database Type
            description: Type of database (postgres or redshift)
            examples:
            - postgres
            - redshift
          host:
            type: string
            title: Host
            description: Database host
            examples:
            - db.example.com
          port:
            type: integer
            title: Port
            description: Database port
            examples:
            - 5432
          database:
            type: string
            title: Database
            description: Database name
            examples:
            - analytics
          username:
            type: string
            title: Username
            description: Database username
            examples:
            - analyst
          password:
            type: string
            title: Password
            description: Database password
            examples:
            - secret123
          source_name:
            anyOf:
            - type: string
            - type: 'null'
            title: Source Name
            description: Optional name for the source
            examples:
            - Production Analytics DB
        type: object
        required:
        - database_type
        - host
        - port
        - database
        - username
        - password
        title: DatabaseConnectorCreate
      DatabaseConnectorResponse:
        properties:
          source_id:
            type: string
            title: Source Id
            description: Unique identifier for the source
          user_id:
            type: string
            title: User Id
            description: ID of the user who owns this source
          database_type:
            type: string
            title: Database Type
            description: Type of database (postgres or redshift)
          host:
            type: string
            title: Host
            description: Database host
          port:
            type: integer
            title: Port
            description: Database port
          database:
            type: string
            title: Database
            description: Database name
          username:
            type: string
            title: Username
            description: Database username
          source_name:
            anyOf:
            - type: string
            - type: 'null'
            title: Source Name
            description: Optional name for the source
          status:
            type: string
            title: Status
            description: Current status of the connector
        type: object
        required:
        - source_id
        - user_id
        - database_type
        - host
        - port
        - database
        - username
        - source_name
        - status
        title: DatabaseConnectorResponse
      EmbedTokenRequest:
        properties:
          customer_id:
            anyOf:
            - type: string
            - type: 'null'
            title: Customer Id
            description: Existing customer ID to associate with the user
          email:
            type: string
            title: Email
            description: Email address of the user to generate token for
          name:
            type: string
            title: Name
            description: Full name of the user
          space_id:
            anyOf:
            - type: string
            - type: 'null'
            title: Space Id
            description: ID of the embedded space the user is given access to
        type: object
        required:
        - email
        - name
        title: EmbedTokenRequest
      EmbedTokenResponse:
        properties:
          token:
            type: string
            title: Token
            description: JWT token for embedded authentication
        type: object
        required:
        - token
        title: EmbedTokenResponse
      ExecutionResponse:
        properties:
          id:
            type: string
            title: Id
          task_id:
            type: string
            title: Task Id
          status:
            "$ref": "#/components/schemas/Status"
          response:
            type: string
            title: Response
          visualization:
            anyOf:
            - type: string
            - type: 'null'
            title: Visualization
        type: object
        required:
        - id
        - task_id
        - status
        - response
        title: ExecutionResponse
      FilterCondition:
        properties:
          operator:
            type: string
            title: Operator
            description: Filter operator to apply
            examples:
            - equals
            - contains
            - greater_than
            - less_than
            - in
          value:
            anyOf:
            - type: string
            - type: integer
            - type: number
            - type: boolean
            - items:
                anyOf:
                - type: string
                - type: integer
                - type: number
                - type: boolean
              type: array
            title: Value
            description: Value to filter by. Can be a single value or list for 'in'
              operator
        type: object
        required:
        - operator
        - value
        title: FilterCondition
      HTTPValidationError:
        properties:
          detail:
            items:
              "$ref": "#/components/schemas/ValidationError"
            type: array
            title: Detail
        type: object
        title: HTTPValidationError
      MessageRequest:
        properties:
          text:
            type: string
            title: Text
        type: object
        required:
        - text
        title: MessageRequest
      SpaceCreate:
        properties:
          source_id:
            type: string
            title: Source Id
            description: ID of the data source to create space from
            examples:
            - src_123
          name:
            type: string
            title: Name
            description: Display name for the space
            examples:
            - Active Users Dashboard
          customer_id:
            type: string
            title: Customer Id
            description: ID of the customer to share this space with
            examples:
            - cust_456
          filters:
            anyOf:
            - additionalProperties:
                "$ref": "#/components/schemas/FilterCondition"
              type: object
            - type: 'null'
            title: Filters
            description: Optional filters to apply to the data source. Keys are column
              names.
            examples:
            - age:
                operator: greater_than
                value: 18
              category:
                operator: in
                value:
                - A
                - B
                - C
              status:
                operator: equals
                value: active
        type: object
        required:
        - source_id
        - name
        - customer_id
        title: SpaceCreate
      SpaceResponse:
        properties:
          space_id:
            type: string
            title: Space Id
            description: Unique identifier for the space
            examples:
            - space_789
          source_id:
            type: string
            title: Source Id
            description: ID of the underlying data source
            examples:
            - src_123
          name:
            type: string
            title: Name
            description: Display name of the space
            examples:
            - Active Users Dashboard
          partner_id:
            type: string
            title: Partner Id
            description: ID of the partner who owns this space
            examples:
            - partner_123
          customer_id:
            type: string
            title: Customer Id
            description: ID of the customer this space is shared with
            examples:
            - cust_456
          filters:
            additionalProperties:
              "$ref": "#/components/schemas/FilterCondition"
            type: object
            title: Filters
            description: Applied filters on the space data
        type: object
        required:
        - space_id
        - source_id
        - name
        - partner_id
        - customer_id
        title: SpaceResponse
      Status:
        type: string
        enum:
        - PENDING
        - RUNNING
        - SUCCESS
        - FAILURE
        title: Status
      ValidationError:
        properties:
          loc:
            items:
              anyOf:
              - type: string
              - type: integer
            type: array
            title: Location
          msg:
            type: string
            title: Message
          type:
            type: string
            title: Error Type
        type: object
        required:
        - loc
        - msg
        - type
        title: ValidationError
    securitySchemes:
      APIKeyHeader:
        type: apiKey
        in: header
        name: X-API-Key
  tags:
  - name: sources
    description: Manage data sources like database connectors, spreadsheets, and smart
      connectors
  - name: spaces
    description: Manage spaces, which are filtered views of data sources shared with
      customers
  - name: embed
    description: Endpoints for embedded authentication and user management
  - name: conversations
    description: AI-powered chat interface for data analysis. Enables natural language
      interactions with your data sources, generates visualizations, and provides analytical
      insights. Each conversation maintains context and can perform multi-step analysis
      tasks.
